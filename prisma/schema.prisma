generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(cuid())
  email        String            @unique
  displayName  String?
  role         Role              @default(USER)
  createdAt    DateTime          @default(now())
  accounts     Account[]
  applications RoomApplication[]
  sessions     Session[]
  votes        Vote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Outfit {
  id          String   @id @default(cuid())
  title       String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(true)
  votes       Vote[]
}

model Room {
  id          String   @id @default(cuid())
  displayName String
  hallName    String?
  roomNumber  String?
  campus      String?
  school      String?
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(true)
  votes       Vote[]
}

model Vote {
  id            String         @id @default(cuid())
  userId        String?
  targetType    VoteTargetType
  roomId        String?
  outfitId      String?
  aestheticness Int
  cleanliness   Int
  creativity    Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deviceId      String?
  outfit        Outfit?        @relation(fields: [outfitId], references: [id])
  room          Room?          @relation(fields: [roomId], references: [id])
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetType, roomId])
  @@unique([userId, targetType, outfitId])
  @@unique([deviceId, targetType, roomId])
  @@unique([deviceId, targetType, outfitId])
}

model RoomApplication {
  id               String            @id @default(cuid())
  userId           String?
  fullName         String
  instagram        String?
  phoneNumber      String?
  hallName         String
  roomNumber       String?
  school           String?
  message          String?
  status           ApplicationStatus @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  academicYear     String?
  description      String?
  email            String?
  photoUrls        String[]
  dormType         String?
  filmingStatus    FilmingStatus     @default(NOT_FILMED)
  participantCount String?
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}

enum Role {
  USER
  ADMIN
}

enum VoteTargetType {
  ROOM
  OUTFIT
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FilmingStatus {
  NOT_FILMED
  FILMED
}
